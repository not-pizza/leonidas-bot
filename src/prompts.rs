use crate::openai;
pub(crate) fn summarize(
    raw_transcript: String,
    title: Option<String>,
    channel_name: Option<String>,
) -> Result<Vec<openai::ChatMessage>, String> {
    let goal_length: usize = (raw_transcript.len() / 50).max(550);
    if goal_length <= 10 {
        return Err(format!("Transcript too short to summarize. (Summary goal length would have been {goal_length} words)"));
    }

    Ok(vec![
        openai::ChatMessage {
            role: "system",
            content: format!(
                "You are a summarization assistant. When the user gives you a message, you respond with a summary of the information inside. Just summarize the information without saying \"the speaker says\" or similar. The message will be an autogenerated transcript of a youtube video, and may have transcription errors and improperly separated speakers. Your summary should be about {goal_length} words.",
            ),
        },
        openai::ChatMessage {
            role: "user",
            content: format!(
                "{title}{channel}\n\nTranscript: {raw_transcript}\n\n\nBe as concise as possible in your summary. Repeat the information as without extra fluff like '{the_speaker} says'. Use full markdown syntax, and break the summary into paragraphs. Emphasize the most important information in **bold**. Remember that your summary should be about {goal_length} words.",
                title=title.map(|title| format!("Title: {title}")).unwrap_or_default(),
                channel=channel_name.clone().map(|channel_name| format!("\nChannel: {channel_name}")).unwrap_or_default(),
                the_speaker=channel_name.unwrap_or("the speaker".to_string()),
            ),
        },
    ])
}
